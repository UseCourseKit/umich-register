using Amazon.Lambda.RuntimeSupport;

CourseCode[] codes = {
    new("CHEM", 210),
    new("CHEM", 211),
    new("ECON", 401),
    new("MATH", 215),
    new("MATH", 214),
    new("MATH", 216),
    new("MATH", 425),
    new("MATSCIE", 220),
    new("MECHENG", 250),
    new("PHYSICS", 240),
    new("PHYSICS", 241),
    new("SPANISH", 232),
    new("STATS", 250),
    new("EDUC", 118),
    new("CLIMATE", 102),
    new("CLIMATE", 105),
    new("SPACE", 103),
    new("ROB", 101),
    new("ROB", 102),
    new("ROB", 103),
    new("ENSCEN", 105),
    new("ENGR", 100),
    new("ENGR", 101),
    new("ENGR", 110),
    new("ENGR", 151),
    new("ENGR", 190),
    new("ENGR", 196),
    new("UARTS", 150),
    new("IOE", 101),
    new("NAVARCH", 102),
    new("BIOLOGY", 110),
    new("CLIMATE", 171),
    new("EARTH", 171),
    new("ENVIRON", 101),
    new("ENVIRON", 102),
    new("ENVIRON", 105),
    new("ENVIRON", 110),
    new("ENVIRON", 118),
    new("ENVIRON", 119),
    new("ENVIRON", 120),
    new("ENVIRON", 131),
    new("ENVIRON", 139),
    new("ENVIRON", 152),
    new("ENVIRON", 167),
    new("RCNSCI", 110),
    new("SI", 106),
    new("SI", 110),
    new("AES", 100),
    new("MOVESCI", 100),
    new("MOVESCI", 110),
    new("SM", 100),
    new("SM", 101),
    new("SM", 111),
    new("RCASL", 100),
    new("RCASL", 101),
    new("RCCORE", 100),
    new("RCHUMS", 150),
    new("RCLANG", 150),
    new("RCLANG", 154),
    new("RCLANG", 190),
    new("RCLANG", 191),
    new("RCLANG", 193),
    new("RCLANG", 194),
    new("RCLANG", 196),
    new("AAS", 103),
    new("AAS", 104),
    new("AAS", 115),
    new("AAS", 125),
    new("AMAS", 103),
    new("AMCULT", 102),
    new("AMCULT", 103),
    new("ASIANPAM", 103),
    new("NATIVEAM", 103),
    new("ANTHRBIO", 167),
    new("ANTHRCUL", 101),
    new("ANTHRCUL", 158),
    new("ASIANLAN", 100),
    new("ASIANLAN", 101),
    new("ASIANLAN", 104),
    new("ASIANLAN", 108),
    new("ASIANLAN", 111),
    new("ASIANLAN", 115),
    new("ASIANLAN", 121),
    new("ASIANLAN", 123),
    new("ASIANLAN", 125),
    new("ASIANLAN", 129),
    new("ASIANLAN", 135),
    new("ASIANLAN", 138),
    new("ASIANLAN", 145),
    new("ASIANLAN", 155),
    new("ASIANLAN", 161),
    new("ASIANLAN", 171),
    new("ASIANLAN", 175),
    new("ASIANLAN", 185),
    new("ASTRO", 101),
    new("ASTRO", 102),
    new("ASTRO", 105),
    new("ASTRO", 106),
    new("ASTRO", 107),
    new("ASTRO", 115),
    new("ASTRO", 127),
    new("ASTRO", 142),
    new("ASTRO", 182),
    new("ASTRO", 183),
    new("BIOLOGY", 101),
    new("BIOLOGY", 105),
    new("BIOLOGY", 108),
    new("BIOLOGY", 117),
    new("BIOLOGY", 120),
    new("BIOLOGY", 171),
    new("BIOLOGY", 172),
    new("BIOLOGY", 173),
    new("BIOLOGY", 192),
    new("BIOLOGY", 205),
    new("BIOPHYS", 117),
    new("BIOPHYS", 150),
    new("BIOPHYS", 151),
    new("CHEM", 105),
    new("CHEM", 125),
    new("CHEM", 126),
    new("CHEM", 130),
    new("CLCIV", 101),
    new("CLCIV", 120),
    new("CLCIV", 121),
    new("CLCIV", 125),
    new("GREEK", 101),
    new("GREEKMOD", 101),
    new("GTBOOKS", 191),
    new("LATIN", 101),
    new("LATIN", 102),
    new("LATIN", 103),
    new("LATIN", 193),
    new("COMM", 101),
    new("COMM", 102),
    new("COMM", 159),
    new("COMPLIT", 100),
    new("COMPLIT", 122),
    new("COMPLIT", 141),
    new("CSP", 101),
    new("ELI", 131),
    new("ENGLISH", 124),
    new("ENGLISH", 125),
    new("ENGLISH", 126),
    new("ENGLISH", 140),
    new("ENGLISH", 150),
    new("EARTH", 100),
    new("EARTH", 103),
    new("EARTH", 104),
    new("EARTH", 106),
    new("EARTH", 107),
    new("EARTH", 108),
    new("EARTH", 109),
    new("EARTH", 110),
    new("EARTH", 112),
    new("EARTH", 113),
    new("EARTH", 114),
    new("EARTH", 118),
    new("EARTH", 119),
    new("EARTH", 120),
    new("EARTH", 122),
    new("EARTH", 131),
    new("EARTH", 132),
    new("EARTH", 142),
    new("EARTH", 147),
    new("EARTH", 151),
    new("EARTH", 154),
    new("ECON", 101),
    new("ECON", 102),
    new("ECON", 108),
    new("FTVM", 150),
    new("FTVM", 190),
    new("DUTCH", 111),
    new("DUTCH", 160),
    new("GERMAN", 100),
    new("GERMAN", 101),
    new("GERMAN", 102),
    new("GERMAN", 103),
    new("GERMAN", 111),
    new("GERMAN", 127),
    new("SCAND", 103),
    new("HISTORY", 103),
    new("HISTORY", 105),
    new("HISTORY", 195),
    new("HISTORY", 196),
    new("HISTORY", 197),
    new("HISTART", 194),
    new("HONORS", 135),
    new("JUDAIC", 101),
    new("JUDAIC", 150),
    new("YIDDISH", 101),
    new("GEOG", 145),
    new("DIGITAL", 158),
    new("ALA", 101),
    new("ALA", 102),
    new("ALA", 104),
    new("ALA", 105),
    new("ALA", 106),
    new("ALA", 107),
    new("ALA", 115),
    new("ALA", 118),
    new("ALA", 122),
    new("ALA", 125),
    new("ALA", 171),
    new("ALA", 174),
    new("UC", 110),
    new("UC", 154),
    new("STS", 105),
    new("INTLSTD", 101),
    new("INTLSTD", 170),
    new("LSWA", 125),
    new("LSWA", 140),
    new("LSWA", 151),
    new("LING", 102),
    new("LING", 103),
    new("LING", 106),
    new("LING", 111),
    new("LING", 115),
    new("LING", 137),
    new("LING", 193),
    new("MATH", 105),
    new("MATH", 115),
    new("MATH", 116),
    new("MATH", 145),
    new("MATH", 156),
    new("MATH", 175),
    new("MATH", 185),
    new("ARABIC", 101),
    new("ARABIC", 121),
    new("ARMENIAN", 101),
    new("HEBREW", 101),
    new("HEBREW", 102),
    new("MELANG", 101),
    new("PERSIAN", 101),
    new("TURKISH", 101),
    new("ORGSTUDY", 195),
    new("PHIL", 101),
    new("PHIL", 110),
    new("PHIL", 183),
    new("PHIL", 196),
    new("PHYSICS", 104),
    new("PHYSICS", 106),
    new("PHYSICS", 115),
    new("PHYSICS", 116),
    new("PHYSICS", 121),
    new("PHYSICS", 140),
    new("PHYSICS", 141),
    new("PHYSICS", 150),
    new("PHYSICS", 151),
    new("PHYSICS", 160),
    new("PHYSICS", 161),
    new("POLSCI", 101),
    new("POLSCI", 111),
    new("POLSCI", 140),
    new("POLSCI", 160),
    new("PSYCH", 111),
    new("PSYCH", 112),
    new("PSYCH", 120),
    new("PSYCH", 121),
    new("PSYCH", 122),
    new("FRENCH", 101),
    new("FRENCH", 103),
    new("ITALIAN", 101),
    new("ITALIAN", 102),
    new("PORTUG", 101),
    new("SPANISH", 100),
    new("SPANISH", 101),
    new("SPANISH", 102),
    new("SPANISH", 103),
    new("WRITING", 100),
    new("WRITING", 120),
    new("WRITING", 160),
    new("BCS", 131),
    new("CZECH", 141),
    new("POLISH", 121),
    new("RUSSIAN", 101),
    new("RUSSIAN", 103),
    new("RUSSIAN", 125),
    new("SLAVIC", 150),
    new("UKR", 151),
    new("SOC", 100),
    new("SOC", 102),
    new("SOC", 105),
    new("SOC", 122),
    new("DATASCI", 101),
    new("WGS", 150),
    new("DANCE", 100),
    new("DANCE", 101),
    new("DANCE", 103),
    new("DANCE", 111),
    new("DANCE", 113),
    new("DANCE", 121),
    new("DANCE", 127),
    new("DANCE", 131),
    new("DANCE", 153),
    new("DANCE", 191),
    new("CLARINET", 111),
    new("ENS", 181),
    new("FLUTE", 100),
    new("FLUTE", 139),
    new("FLUTE", 140),
    new("GUITAR", 111),
    new("GUITAR", 112),
    new("HARP", 100),
    new("HARP", 139),
    new("HARP", 140),
    new("HARP", 150),
    new("JAZZ", 114),
    new("JAZZ", 150),
    new("MUSED", 121),
    new("MUSICOL", 121),
    new("MUSICOL", 139),
    new("MUSTHTRE", 123),
    new("MUSTHTRE", 133),
    new("MUSTHTRE", 150),
    new("MUSTHTRE", 151),
    new("OBOE", 100),
    new("OBOE", 111),
    new("OBOE", 139),
    new("OBOE", 140),
    new("OPERA", 139),
    new("ORGAN", 100),
    new("ORGAN", 139),
    new("ORGAN", 140),
    new("ORGAN", 150),
    new("PAT", 100),
    new("PAT", 101),
    new("PIANO", 100),
    new("PIANO", 110),
    new("PIANO", 111),
    new("PIANO", 112),
    new("PIANO", 113),
    new("PIANO", 114),
    new("PIANO", 139),
    new("PIANO", 140),
    new("THEORY", 135),
    new("THEORY", 137),
    new("THEORY", 139),
    new("THEORY", 149),
    new("TROMBONE", 100),
    new("TROMBONE", 139),
    new("TROMBONE", 140),
    new("TROMBONE", 150),
    new("VIOLA", 100),
    new("VIOLA", 139),
    new("VIOLA", 140),
    new("VIOLIN", 100),
    new("VIOLIN", 111),
    new("VIOLIN", 112),
    new("VIOLIN", 139),
    new("VIOLIN", 140),
    new("VOICE", 100),
    new("VOICE", 111),
    new("VOICE", 112),
    new("VOICE", 139),
    new("VOICE", 140),
    new("THTREMUS", 101),
    new("THTREMUS", 102),
    new("THTREMUS", 172),
    new("THTREMUS", 181),
    new("THTREMUS", 192),
    new("NURS", 142),
    new("NURS", 196),
    new("AERO", 101),
    new("MILSCI", 101),
    new("NAVSCI", 101),
    new("PHARMACY", 117),
    new("BA", 100),
    new("BA", 101),
    new("BA", 102),
    new("ARTDES", 100),
    new("ARTDES", 105),
    new("ARTDES", 115),
    new("ARTDES", 120),
    new("ARTDES", 125),
    new("ARTDES", 129),
    new("ARTDES", 130),
    new("ARTDES", 150),
    new("ARTDES", 160),
    new("ARTDES", 170),
    new("ARTDES", 172),
    new("ARTDES", 173),
    new("ARTDES", 174),
    new("ARTDES", 175),
    new("ARTDES", 176),
    new("ARTDES", 177),
    new("ARTDES", 178),
    new("ARTDES", 181),
    new("ARTDES", 190),
    new("ARTDES", 192),
    new("ARTDES", 193),
    new("ARTDES", 197),
    new("INTPERF", 160),
    new("EECS", 110),
    new("EECS", 183),
    new("EECS", 200),
    new("EECS", 201),
    new("EECS", 203),
    new("EECS", 215),
    new("EECS", 216),
    new("EECS", 230),
    new("EECS", 270),
    new("EECS", 280),
    new("EECS", 281),
    new("EECS", 298),
    new("EECS", 300),
    new("EECS", 301),
    new("EECS", 311),
    new("EECS", 312),
    new("EECS", 314),
    new("EECS", 320),
    new("EECS", 330),
    new("EECS", 334),
    new("EECS", 351),
    new("EECS", 370),
    new("EECS", 373),
    new("EECS", 376),
    new("EECS", 388),
    new("EECS", 399),
    new("EECS", 402),
    new("EECS", 409),
    new("EECS", 411),
    new("EECS", 413),
    new("EECS", 414),
    new("EECS", 417),
    new("EECS", 421),
    new("EECS", 423),
    new("EECS", 427),
    new("EECS", 428),
    new("EECS", 434),
    new("EECS", 438),
    new("EECS", 441),
    new("EECS", 442),
    new("EECS", 443),
    new("EECS", 445),
    new("EECS", 449),
    new("EECS", 452),
    new("EECS", 455),
    new("EECS", 458),
    new("EECS", 460),
    new("EECS", 461),
    new("EECS", 463),
    new("EECS", 464),
    new("EECS", 467),
    new("EECS", 470),
    new("EECS", 471),
    new("EECS", 473),
    new("EECS", 477),
    new("EECS", 478),
    new("EECS", 481),
    new("EECS", 482),
    new("EECS", 483),
    new("EECS", 484),
    new("EECS", 485),
    new("EECS", 490),
    new("EECS", 491),
    new("EECS", 492),
    new("EECS", 493),
    new("EECS", 494),
    new("EECS", 495),
    new("EECS", 496),
    new("EECS", 497),
    new("EECS", 498),
    new("EECS", 499),
    new("EECS", 501),
    new("EECS", 504),
    new("EECS", 507),
    new("EECS", 509),
    new("EECS", 516),
    new("EECS", 520),
    new("EECS", 523),
    new("EECS", 529),
    new("EECS", 530),
    new("EECS", 534),
    new("EECS", 537),
    new("EECS", 540),
    new("EECS", 548),
    new("EECS", 549),
    new("EECS", 550),
    new("EECS", 551),
    new("EECS", 553),
    new("EECS", 554),
    new("EECS", 560),
    new("EECS", 566),
    new("EECS", 571),
    new("EECS", 572),
    new("EECS", 573),
    new("EECS", 575),
    new("EECS", 583),
    new("EECS", 587),
    new("EECS", 589),
    new("EECS", 590),
    new("EECS", 592),
    new("EECS", 593),
    new("EECS", 595),
    new("EECS", 598),
    new("EECS", 599),
};

async Task AsyncHandler()
{
    var client = new APIClient();
    var db = new CourseDatabase();
    // This ensures that we only ask for one token, as the following can decide to ask for tokens simultaneously
    await client.EnsureRefreshedTokenLoaded();
    await Parallel.ForEachAsync(codes, async (code, token) =>
    {
        try
        {
            var seq = await client.ReadSections("2420", code.Catalog, code.CatalogNbr);
            await db.SaveCourses(seq);
            Console.WriteLine($"saved {seq.Count()} sections for {code.Catalog} {code.CatalogNbr}");
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Failed to save data for {code.Catalog} {code.CatalogNbr}: {e.Message}");
            Console.Error.WriteLine(e.StackTrace ?? "No stack trace available");
        }
    });
}

await LambdaBootstrapBuilder.Create(AsyncHandler).Build().RunAsync();
// await AsyncHandler();

readonly struct CourseCode
{
    public string Catalog { get; init; }
    public short CatalogNbr { get; init; }

    public CourseCode(string cat, short nbr)
    {
        Catalog = cat;
        CatalogNbr = nbr;
    }
}